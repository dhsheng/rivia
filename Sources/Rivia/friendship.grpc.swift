//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: friendship.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `FriendshipServiceClient`, then call methods of this protocol to make API calls.
public protocol FriendshipServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: FriendshipServiceClientInterceptorFactoryProtocol? { get }

  func createFollow(
    _ request: CreateFollowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CreateFollowRequest, CreateFollowResponse>

  func destroyFollow(
    _ request: DestroyFollowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<DestroyFollowRequest, DestroyFollowResponse>

  func fetchFollowers(
    _ request: FetchFollowersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FetchFollowersRequest, FetchFollowersResponse>

  func fetchFollowing(
    _ request: FetchFollowingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FetchFollowingRequest, FetchFollowingResponse>

  func fetchCounter(
    _ request: FetchCounterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FetchCounterRequest, FetchCounterResponse>

  func fetchFriends(
    _ request: FetchFriendsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FetchFriendsRequest, FetchFriendsResponse>
}

extension FriendshipServiceClientProtocol {
  public var serviceName: String {
    return "FriendshipService"
  }

  /// Unary call to CreateFollow
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFollow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createFollow(
    _ request: CreateFollowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CreateFollowRequest, CreateFollowResponse> {
    return self.makeUnaryCall(
      path: "/FriendshipService/CreateFollow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFollowInterceptors() ?? []
    )
  }

  /// Unary call to DestroyFollow
  ///
  /// - Parameters:
  ///   - request: Request to send to DestroyFollow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func destroyFollow(
    _ request: DestroyFollowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<DestroyFollowRequest, DestroyFollowResponse> {
    return self.makeUnaryCall(
      path: "/FriendshipService/DestroyFollow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDestroyFollowInterceptors() ?? []
    )
  }

  /// Unary call to FetchFollowers
  ///
  /// - Parameters:
  ///   - request: Request to send to FetchFollowers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func fetchFollowers(
    _ request: FetchFollowersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FetchFollowersRequest, FetchFollowersResponse> {
    return self.makeUnaryCall(
      path: "/FriendshipService/FetchFollowers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchFollowersInterceptors() ?? []
    )
  }

  /// Unary call to FetchFollowing
  ///
  /// - Parameters:
  ///   - request: Request to send to FetchFollowing.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func fetchFollowing(
    _ request: FetchFollowingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FetchFollowingRequest, FetchFollowingResponse> {
    return self.makeUnaryCall(
      path: "/FriendshipService/FetchFollowing",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchFollowingInterceptors() ?? []
    )
  }

  /// Unary call to FetchCounter
  ///
  /// - Parameters:
  ///   - request: Request to send to FetchCounter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func fetchCounter(
    _ request: FetchCounterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FetchCounterRequest, FetchCounterResponse> {
    return self.makeUnaryCall(
      path: "/FriendshipService/FetchCounter",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchCounterInterceptors() ?? []
    )
  }

  /// Unary call to FetchFriends
  ///
  /// - Parameters:
  ///   - request: Request to send to FetchFriends.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func fetchFriends(
    _ request: FetchFriendsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FetchFriendsRequest, FetchFriendsResponse> {
    return self.makeUnaryCall(
      path: "/FriendshipService/FetchFriends",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchFriendsInterceptors() ?? []
    )
  }
}

public protocol FriendshipServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createFollow'.
  func makeCreateFollowInterceptors() -> [ClientInterceptor<CreateFollowRequest, CreateFollowResponse>]

  /// - Returns: Interceptors to use when invoking 'destroyFollow'.
  func makeDestroyFollowInterceptors() -> [ClientInterceptor<DestroyFollowRequest, DestroyFollowResponse>]

  /// - Returns: Interceptors to use when invoking 'fetchFollowers'.
  func makeFetchFollowersInterceptors() -> [ClientInterceptor<FetchFollowersRequest, FetchFollowersResponse>]

  /// - Returns: Interceptors to use when invoking 'fetchFollowing'.
  func makeFetchFollowingInterceptors() -> [ClientInterceptor<FetchFollowingRequest, FetchFollowingResponse>]

  /// - Returns: Interceptors to use when invoking 'fetchCounter'.
  func makeFetchCounterInterceptors() -> [ClientInterceptor<FetchCounterRequest, FetchCounterResponse>]

  /// - Returns: Interceptors to use when invoking 'fetchFriends'.
  func makeFetchFriendsInterceptors() -> [ClientInterceptor<FetchFriendsRequest, FetchFriendsResponse>]
}

public final class FriendshipServiceClient: FriendshipServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: FriendshipServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the FriendshipService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FriendshipServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

